// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.spring.roo.tiendavirtual.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.spring.roo.tiendavirtual.domain.LineaPedido;
import org.spring.roo.tiendavirtual.domain.Pedido;
import org.spring.roo.tiendavirtual.domain.Producto;
import org.spring.roo.tiendavirtual.domain.QLineaPedido;
import org.spring.roo.tiendavirtual.repository.LineaPedidoRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect LineaPedidoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: LineaPedidoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LineaPedidoRepositoryImpl.PEDIDO = "pedido";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LineaPedidoRepositoryImpl.CANTIDAD = "cantidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LineaPedidoRepositoryImpl.PRECIO = "precio";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LineaPedidoRepositoryImpl.PRODUCTO = "producto";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LineaPedido> LineaPedidoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLineaPedido lineaPedido = QLineaPedido.lineaPedido;
        
        JPQLQuery<LineaPedido> query = from(lineaPedido);
        
        Path<?>[] paths = new Path<?>[] {lineaPedido.pedido,lineaPedido.cantidad,lineaPedido.precio,lineaPedido.producto};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PEDIDO, lineaPedido.pedido)
			.map(CANTIDAD, lineaPedido.cantidad)
			.map(PRECIO, lineaPedido.precio)
			.map(PRODUCTO, lineaPedido.producto);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lineaPedido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LineaPedido> LineaPedidoRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QLineaPedido lineaPedido = QLineaPedido.lineaPedido;
        
        JPQLQuery<LineaPedido> query = from(lineaPedido);
        
        Path<?>[] paths = new Path<?>[] {lineaPedido.pedido,lineaPedido.cantidad,lineaPedido.precio,lineaPedido.producto};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(lineaPedido.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PEDIDO, lineaPedido.pedido)
			.map(CANTIDAD, lineaPedido.cantidad)
			.map(PRECIO, lineaPedido.precio)
			.map(PRODUCTO, lineaPedido.producto);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lineaPedido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pedido
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LineaPedido> LineaPedidoRepositoryImpl.findByPedido(Pedido pedido, GlobalSearch globalSearch, Pageable pageable) {
        
        QLineaPedido lineaPedido = QLineaPedido.lineaPedido;
        
        JPQLQuery<LineaPedido> query = from(lineaPedido);
        
        Assert.notNull(pedido, "pedido is required");
        
        query.where(lineaPedido.pedido.eq(pedido));
        Path<?>[] paths = new Path<?>[] {lineaPedido.pedido,lineaPedido.cantidad,lineaPedido.precio,lineaPedido.producto};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PEDIDO, lineaPedido.pedido)
			.map(CANTIDAD, lineaPedido.cantidad)
			.map(PRECIO, lineaPedido.precio)
			.map(PRODUCTO, lineaPedido.producto);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lineaPedido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LineaPedido> LineaPedidoRepositoryImpl.findByProducto(Producto producto, GlobalSearch globalSearch, Pageable pageable) {
        
        QLineaPedido lineaPedido = QLineaPedido.lineaPedido;
        
        JPQLQuery<LineaPedido> query = from(lineaPedido);
        
        Assert.notNull(producto, "producto is required");
        
        query.where(lineaPedido.producto.eq(producto));
        Path<?>[] paths = new Path<?>[] {lineaPedido.pedido,lineaPedido.cantidad,lineaPedido.precio,lineaPedido.producto};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PEDIDO, lineaPedido.pedido)
			.map(CANTIDAD, lineaPedido.cantidad)
			.map(PRECIO, lineaPedido.precio)
			.map(PRODUCTO, lineaPedido.producto);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lineaPedido);
    }
    
}
