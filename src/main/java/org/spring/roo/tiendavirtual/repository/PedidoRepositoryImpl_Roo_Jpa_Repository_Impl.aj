// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.spring.roo.tiendavirtual.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.spring.roo.tiendavirtual.domain.Cliente;
import org.spring.roo.tiendavirtual.domain.Pedido;
import org.spring.roo.tiendavirtual.domain.QPedido;
import org.spring.roo.tiendavirtual.repository.PedidoRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect PedidoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: PedidoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PedidoRepositoryImpl.TOTAL = "total";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PedidoRepositoryImpl.CLIENTE = "cliente";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Pedido> PedidoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPedido pedido = QPedido.pedido;
        
        JPQLQuery<Pedido> query = from(pedido);
        
        Path<?>[] paths = new Path<?>[] {pedido.total,pedido.cliente};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TOTAL, pedido.total)
			.map(CLIENTE, pedido.cliente);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, pedido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Pedido> PedidoRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QPedido pedido = QPedido.pedido;
        
        JPQLQuery<Pedido> query = from(pedido);
        
        Path<?>[] paths = new Path<?>[] {pedido.total,pedido.cliente};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(pedido.identificadorPedido.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TOTAL, pedido.total)
			.map(CLIENTE, pedido.cliente);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, pedido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cliente
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Pedido> PedidoRepositoryImpl.findByCliente(Cliente cliente, GlobalSearch globalSearch, Pageable pageable) {
        
        QPedido pedido = QPedido.pedido;
        
        JPQLQuery<Pedido> query = from(pedido);
        
        Assert.notNull(cliente, "cliente is required");
        
        query.where(pedido.cliente.eq(cliente));
        Path<?>[] paths = new Path<?>[] {pedido.total,pedido.cliente};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TOTAL, pedido.total)
			.map(CLIENTE, pedido.cliente);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, pedido);
    }
    
}
